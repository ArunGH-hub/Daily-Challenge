#Write an algorithm that takes an array and moves all of the zeros to the end, preserving the order of the other elements.

def move_zeros(lst):
    res = []
    for i in lst :
        if i == 0 :
            res.append(i) #add zeros to a new list
            lst.remove(0) #remove the 0s from the original list
    
    lst.extend(res) #adds zeros to end
    return lst
            
#Here's the deal:

#It must start with a hashtag (#).
#All words must have their first letter capitalized.
#If the final result is longer than 140 chars it must return false.
#If the input or the result is an empty string it must return false.

def generate_hashtag(s):
    res = ""
    for i in s.split() :
        res += i.capitalize()
        
    new = f"#{res}"
    
    if len(new) > 140 :
        return False
    
    elif not s :
        return False
    
    else :
        return new
    
    
#Move the first letter of each word to the end of it, then add "ay" to the end of the word. Leave punctuation marks untouched.

def pig_it(text):
    text = text.split(" ")
    res = []
    for i in text :
        if i.isalpha() :
            new_word = i[1:] + i[0] + "ay"
            res.append(new_word)
        else :
            res.append(i)
        
    return " ".join(res)    
        



def zeros(n):
    import math
    if n == 0 :
        return 0
    
    else :
    
        new = math.factorial(n)
        digits = list(map(int,str(new))) #split factorial into digits
        res = []
        for i in digits[::-1] : #reverse the digits for the iteration 
            if i != 0 :
                res.append(i)
                break #cuts the if statement as soon as a non-zero is found
                
              

        #work out index of the first 6
        check = digits[::-1].index(res[0]) #6 is at index 2 so need to return everything up to index 2
        

        return len(digits[::-1][:check]) #final answer     


#ROT13 decipher. For this task you're only supposed to substitute characters. Not spaces, punctuation, numbers, etc.

def rot13(message):
    table = str.maketrans("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz","NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm") #maps the table, used in conjuction with translate
    res = []
    for i in list(message) :
        if i.isalpha() :
            res.append(i.translate(table))     
        else :
            res.append(i)
            
    return "".join(res)        
            
            
  #Complete the function that accepts two integer arrays of equal length compares the value each member in one array to the corresponding member in the othersquares the absolute value difference between those two valuesand returns the average of those squared absolute value difference between each member pair.

def solution(array_a, array_b):
    new = zip(array_a,array_b)
    res = []
    check = [abs(i[0]-i[1])**2 for i in new] #squares the absolute difference using list comprehension
    
    return sum(check)/len(array_a)

#Complete the function/method so that it takes a PascalCase string and returns the string in snake_case notation. Lowercase characters can be numbers. If the method gets a number as input, it should return a string.

def to_underscore(string):
    if str(string).isdigit() : #checking if it is a number
        return str(string)
    
    else :
        res = ""
        for i in range(len(string)-1) :
            if string[i].isupper() :
                res += f"_{string[i]}"
            else :
                res += string[i]
        res += string[-1]      
        return res[1:].lower()       
            
                
    #In some countries of former Soviet Union there was a belief about lucky tickets. A transport ticket of any sort was believed to posess luck if sum of digits on the left half of its number was equal to the sum of digits on the right half. Here are examples of such numbers:

def luck_check(string) :
    if not string :
        return False 
        
    elif not string.isdigit() :
        return False
    
    else :
    
        string = list(map(int,string))
        if len(string) % 2== 0 : #even length
            divide = int(len(string)/2)
            left = string[:divide]
            right = string[divide:]
            return sum(left) == sum(right)

        else : # if length of string is odd
            import math
            odd_div = math.ceil((len(string)/2)) #this represents the middle number which is has index number minus 1
            odd_div_idx = odd_div-1
            left = string[:odd_div_idx]
            right = string[odd_div_idx:]
            return sum(left) == sum(right)
        
        

      #ROT13 is a simple letter substitution cipher that replaces a letter with the letter 13 letters after it in the alphabet.

def rot13(message):
    return "".join([chr((((ord(i)-97)+13)%26)+97) if i.islower() else chr((((ord(i)-65)+13)%26)+65) if i.isupper() else i for i in message]) #minus 96 for i.lower and minus 64 for i.upper
    
    
#Write an algorithm that takes an array and moves all of the zeros to the end, preserving the order of the other elements.

#Write an algorithm that takes an array and moves all of the zeros to the end, preserving the order of the other elements.

def move_zeros(lst):
    return sorted(lst, key = lambda x : x == 0)
    
#Write a function that when given a URL as a string, parses out just the domain name and returns it as a string. For example:

#url = "http://github.com/carbonfive/raygun"
import re
def domain_name(url):
    if "//" not in url and "www" not in url :
        return url.split(".")[0]
    
    elif "www" in url : #if www is at the beginning of the string
        return url.split(".")[1]
    
    else :
    
        idx = url.index("//") #remove the first bit
        return url[idx+2:].split(".")[0] #removes everything after the dot


def pig_it(text):
    return " ".join([f"{i[1:]}{i[0]}ay" if i.isalpha() else i for i in text.split()])


def rot13(message):
    table = str.maketrans("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz","NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm")
    return message.translate(table)


#weight for weight 5th kyu
#The weight of a number will be from now on the sum of its digits.


def order_weight(strng):
    new = list(map(int,strng.split())) #convert to list of numbers
    weight = [sum(list(map(int,str(i)))) for i in new] #these are the corresponding weights
    
    final = list(zip(new,weight))
    
    check = sorted(final,key = lambda x : (x[1],str(x[0]))) #sorted final list
    
    
    
    return " ".join([str(i[0]) for i in check]) #convert final answer to strings
