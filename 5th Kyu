#Write an algorithm that takes an array and moves all of the zeros to the end, preserving the order of the other elements.

def move_zeros(lst):
    res = []
    for i in lst :
        if i == 0 :
            res.append(i) #add zeros to a new list
            lst.remove(0) #remove the 0s from the original list
    
    lst.extend(res) #adds zeros to end
    return lst
            
#Here's the deal:

#It must start with a hashtag (#).
#All words must have their first letter capitalized.
#If the final result is longer than 140 chars it must return false.
#If the input or the result is an empty string it must return false.

def generate_hashtag(s):
    res = ""
    for i in s.split() :
        res += i.capitalize()
        
    new = f"#{res}"
    
    if len(new) > 140 :
        return False
    
    elif not s :
        return False
    
    else :
        return new
    
    
#Move the first letter of each word to the end of it, then add "ay" to the end of the word. Leave punctuation marks untouched.

def pig_it(text):
    text = text.split(" ")
    res = []
    for i in text :
        if i.isalpha() :
            new_word = i[1:] + i[0] + "ay"
            res.append(new_word)
        else :
            res.append(i)
        
    return " ".join(res)    
        



def zeros(n):
    import math
    if n == 0 :
        return 0
    
    else :
    
        new = math.factorial(n)
        digits = list(map(int,str(new))) #split factorial into digits
        res = []
        for i in digits[::-1] : #reverse the digits for the iteration 
            if i != 0 :
                res.append(i)
                break #cuts the if statement as soon as a non-zero is found
                
              

        #work out index of the first 6
        check = digits[::-1].index(res[0]) #6 is at index 2 so need to return everything up to index 2
        

        return len(digits[::-1][:check]) #final answer     


#ROT13 decipher. For this task you're only supposed to substitute characters. Not spaces, punctuation, numbers, etc.

def rot13(message):
    table = str.maketrans("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz","NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm") #maps the table, used in conjuction with translate
    res = []
    for i in list(message) :
        if i.isalpha() :
            res.append(i.translate(table))     
        else :
            res.append(i)
            
    return "".join(res)        
            
            
  #Complete the function that accepts two integer arrays of equal length compares the value each member in one array to the corresponding member in the othersquares the absolute value difference between those two valuesand returns the average of those squared absolute value difference between each member pair.

def solution(array_a, array_b):
    new = zip(array_a,array_b)
    res = []
    check = [abs(i[0]-i[1])**2 for i in new] #squares the absolute difference using list comprehension
    
    return sum(check)/len(array_a)

#Complete the function/method so that it takes a PascalCase string and returns the string in snake_case notation. Lowercase characters can be numbers. If the method gets a number as input, it should return a string.

def to_underscore(string):
    if str(string).isdigit() : #checking if it is a number
        return str(string)
    
    else :
        res = ""
        for i in range(len(string)-1) :
            if string[i].isupper() :
                res += f"_{string[i]}"
            else :
                res += string[i]
        res += string[-1]      
        return res[1:].lower()       
            
                
          
    
    


