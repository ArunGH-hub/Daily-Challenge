#You will be given a string of student names. Sort them and return a list of names in descending order.
def lineup_students(string):
        sorted_list = string.split(" ")
        return sorted(sorted_list,key=len)[::-1]

        
#The string given to your function has had an "egg" inserted directly after each consonant. You need to return the string before it became eggcoded.
def unscramble_eggs(word):
    return word.replace('egg','')


#Write a function that takes a single string (word) as argument. The function must return an ordered list containing the indexes of all capital letters in the string.

def capitals(word) :
    arr=[]
    for i in word :
       if i.upper() == i :
            index = word.index(i.upper())
            arr.append(index)
    return arr


#Your job is to write a function, which takes three integers a, b, and c as arguments, and returns True if exactly two of of the three integers are positive numbers (greater than zero), and False - otherwise.        
def two_are_positive(a,b,c):
    arr = []
    if a > 0 :
        arr.append(a)
    if b > 0 :
        arr.append(b)
    if c > 0 :
        arr.append(c)
    return  True if len(arr) == 2 else False  
 

#function that calculates the volume of a cone
import math
def cup_volume(d1, d2, height):
    volume = 1/3 * math.pi * height * ((d1/2)**2 + (d2/2)**2 + d1/2 * d2/2) #formula for volume of a cone
    return volume


#You will be given a string (x) featuring a cat 'C' and a mouse 'm'. The rest of the string will be made up of '.'.
def cat_mouse(x):
    index1 = x.index("C")
    index2 = x.index("m")
    difference = abs(index1 - index2)
    if difference <= 4 :
        return "Caught!"
    else :
        return "Escaped!"
            

def high_and_low(numbers):
    split = numbers.split(" ")
    integer_list = [int(i) for i in split]
    return str(max(integer_list)) + " " + str(min(integer_list))

#In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.
    

def square_digits(num):
    result = ""
    string_num = str(num)
    for i in string_num:
        result += str(int(i)**2)
    return result   

#this is correct, using the sm function is easy here


#our job is to return the middle character of the word. If the word's length is odd, return the middle character. If the word's length is even, return the middle 2 characters.
        
def get_middle(s):
    odd_index = int(len(s) // 2)
    even_index = int(len(s) / 2) #remember to include the letter after too
    int_even = even_index + 1
    if len(s) % 2 != 0 :
        return s[odd_index]
    else :
        return s[even_index-1 :even_index+1]
    

#Groups of characters decided to make a battle. Help them to figure out which group is more powerful. Create a function that will accept 2 strings and return the one who's stronger.
def battle(x,y):
    dict = {"A":1, "B":2, "C":3,"D":4,"E":5,"F":6,"G":7,"H":8,"I":9,"J":10,"K":11,"L":12,"M":13,"N":14,"O":15,"P":16,"Q":17,"R":18,"S":19,"T":20,"U":21,"V":22,"W":23,"X":24,"Y":24,"Z":25}
    #list_x = ",".join(x) #converts to a list #DON'T NEED THIS STEP
    x_arr = []
    for i in x :
        result = dict[i]
        x_arr.append(result)
    
    y_arr = []
    for i in y :
        result = dict[i]
        y_arr.append(result)
    
    if sum(y_arr) > sum(x_arr) :
        return y
    elif sum(x_arr) > sum(y_arr) :
        return x
    else :
        return "Tie!"


def find_short(s):
    s = s.split() # splits the string into a list of individual words
    l = min(s, key = len) # finds the shortest string in the list
    return len(l) # returns shortest word length

#ALTERNATIVE CORRECT SOLUTION here., you can use key = len for min


#If a name has exactly 4 letters in it, you can be sure that it has to be a friend of yours! Otherwise, you can be sure he's not...

def friend(x):
    result = []
    for i in x :
        if len(i) == 4 :
            result.append(i)
    return result            

#odd or even
def odd_or_even(arr):
    if arr == [] :
        return "even"
    elif sum(arr) % 2 == 0 :
        return "even"
    else :
        return "odd"



#Check to see if a string has the same amount of 'x's and 'o's

def xo(s):
    s = s.lower()
    x_count = s.count("x")
    o_count = s.count("o")
    if x_count == o_count :
        return True
    else :
        return False



def open_or_senior(data):
    arr1 = [] #age_list
    arr2 = [] #handicap list
    arr = []
    for i in data:
        if i[0] >= 55 and i[1] > 7 :
            arr.append("Senior") 
        else :
            arr.append("Open")
    return arr        
   
    
#Input will consist of a list of pairs. Each pair contains information for a single potential member. Information consists of an integer for the person's age and an integer for the person's handicap.

def printer_error(s):
    len(s) >= 1
    colours = ["a","b","c","d","e","f","g","h","i","j","k","l","m"]
    result = []
    for i in s :
        if i not in colours :
            result.append(i)
    return str(len(result)) + "/" + str(len(s))
             
            
#Sometimes there are problems: lack of colors, technical malfunction and a "bad" control string is produced e.g. aaaxbbbbyyhwawiwjjjwwm with letters not from a to m            

def nb_year(p0, percent, aug, p):
    p0 > 0
    p > 0
    result = 0
    while p0 < p :
        p0 += p0 * percent/100 + aug
        result += 1
    return result

#In a small town the population is p0 = 1000 at the beginning of a year. The population regularly increases by 2 percent per year and moreover 50 new inhabitants per year come to live in the town.


#You are given an odd-length array of integers, in which all of them are the same, except for one single number.
def stray(arr):
    result = 0
    for i in arr:
         if arr.count(i) == 1 :
                result += i
    return result  


#Mr. Scrooge has a sum of money 'P' that he wants to invest. Before he does, he wants to know how many years 'Y' this sum 'P' has to be kept in the bank in order for it to amount to a desired sum of money 'D'.

def calculate_years(P, interest, tax, desired):
    years = 0
    income_tax = P * interest * tax
    result = (P * interest+1) - income_tax
    while P < desired :
        P += result
        years += 1 
    return years

#The order of the numbers passed in could be any order. The array will always include at least 2 items. If there are two or more oldest age, then return both of them in array format
def two_oldest_ages(ages):
    return sorted(ages)[-2:]

#In this Kata, you will be given a string that may have mixed uppercase and lowercase letters and your task is to convert that string to either lowercase only or uppercase only based on:make as few changes as possible.
#if the string contains equal number of uppercase and lowercase letters, convert the string to lowercase.

def solve(s) :
    upper_string = ""
    lower_string = ""
    for i in s :
        if i == i.upper() :
            upper_string += i.upper()
        elif i == i.lower() :
            lower_string += i.lower()
    
    if len(lower_string) >= len(upper_string) :
        return s.lower()
    else :
        return s.upper()
        
        
#Create a function that returns the sum of the two lowest positive numbers given an array of minimum 4 positive integers. No floats or non-positive integers will be passed.

def sum_two_smallest_numbers(numbers):
    for i in numbers:
        if i > 0 :
            return sum(sorted(numbers)[0:2])


def longest(a1, a2):
    result = ""
    for i in a1 :
        if i not in result :
            result += i
    for i in a2 :
        if i not in result :
            result += i
    sorted_string = "".join(sorted(result)) #how to sort a string
    return sorted_string
            
#return number of vowels in a given string
def get_count(sentence):
    result = []
    vowels = ["a","o","e","i","u"]
    for i in sentence :
        if i in vowels :
            result.append(i)
    return len(result)


#Your task is to capitalize every word that has length greater than 2, leaving smaller words as they are.
def drop_cap(words):
    normalised_word = words.split(" ")
    result = []
    for i in normalised_word :
        if len(i) > 2 :
            result.append(i[0].upper() + i[1:].lower())
        else :
            result.append(i)
    return " ".join(result)

#correct soltuion




