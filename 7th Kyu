#You will be given a string of student names. Sort them and return a list of names in descending order.
def lineup_students(string):
        sorted_list = string.split(" ")
        return sorted(sorted_list,key=len)[::-1]

        
#The string given to your function has had an "egg" inserted directly after each consonant. You need to return the string before it became eggcoded.
def unscramble_eggs(word):
    return word.replace('egg','')


#Write a function that takes a single string (word) as argument. The function must return an ordered list containing the indexes of all capital letters in the string.

def capitals(word) :
    arr=[]
    for i in word :
       if i.upper() == i :
            index = word.index(i.upper())
            arr.append(index)
    return arr


#Your job is to write a function, which takes three integers a, b, and c as arguments, and returns True if exactly two of of the three integers are positive numbers (greater than zero), and False - otherwise.        
def two_are_positive(a,b,c):
    arr = []
    if a > 0 :
        arr.append(a)
    if b > 0 :
        arr.append(b)
    if c > 0 :
        arr.append(c)
    return  True if len(arr) == 2 else False  
 

#function that calculates the volume of a cone
import math
def cup_volume(d1, d2, height):
    volume = 1/3 * math.pi * height * ((d1/2)**2 + (d2/2)**2 + d1/2 * d2/2) #formula for volume of a cone
    return volume


#You will be given a string (x) featuring a cat 'C' and a mouse 'm'. The rest of the string will be made up of '.'.
def cat_mouse(x):
    index1 = x.index("C")
    index2 = x.index("m")
    difference = abs(index1 - index2)
    if difference <= 4 :
        return "Caught!"
    else :
        return "Escaped!"
            

def high_and_low(numbers):
    split = numbers.split(" ")
    integer_list = [int(i) for i in split]
    return str(max(integer_list)) + " " + str(min(integer_list))

#In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.
    

def square_digits(num):
    result = ""
    string_num = str(num)
    for i in string_num:
        result += str(int(i)**2)
    return result   

#this is correct, using the sm function is easy here


#our job is to return the middle character of the word. If the word's length is odd, return the middle character. If the word's length is even, return the middle 2 characters.
        
def get_middle(s):
    odd_index = int(len(s) // 2)
    even_index = int(len(s) / 2) #remember to include the letter after too
    int_even = even_index + 1
    if len(s) % 2 != 0 :
        return s[odd_index]
    else :
        return s[even_index-1 :even_index+1]
    

#Groups of characters decided to make a battle. Help them to figure out which group is more powerful. Create a function that will accept 2 strings and return the one who's stronger.
def battle(x,y):
    dict = {"A":1, "B":2, "C":3,"D":4,"E":5,"F":6,"G":7,"H":8,"I":9,"J":10,"K":11,"L":12,"M":13,"N":14,"O":15,"P":16,"Q":17,"R":18,"S":19,"T":20,"U":21,"V":22,"W":23,"X":24,"Y":24,"Z":25}
    #list_x = ",".join(x) #converts to a list #DON'T NEED THIS STEP
    x_arr = []
    for i in x :
        result = dict[i]
        x_arr.append(result)
    
    y_arr = []
    for i in y :
        result = dict[i]
        y_arr.append(result)
    
    if sum(y_arr) > sum(x_arr) :
        return y
    elif sum(x_arr) > sum(y_arr) :
        return x
    else :
        return "Tie!"


def find_short(s):
    s = s.split() # splits the string into a list of individual words
    l = min(s, key = len) # finds the shortest string in the list
    return len(l) # returns shortest word length

#ALTERNATIVE CORRECT SOLUTION here., you can use key = len for min

