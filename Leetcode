#leetcode string
#find first and last position of element in sorted array

def searchRange(nums,target):
    if target in nums :
        return [i for i,c in enumerate(nums) if c == target]
    else :
        return [-1,-1]


import pandas as pd

def big_countries(world: pd.DataFrame) -> pd.DataFrame:
    con1 = world["area"] >= 3000000 
    con2 = world["population"] >= 25000000

    new = world[["name","population","area"]] #returns name,population and area columns

    return new[con1 | con2]


import pandas as pd

def find_products(products: pd.DataFrame) -> pd.DataFrame:
    con1 = products["low_fats"] == "Y"
    con2 = products["recyclable"] == "Y"

    return pd.DataFrame(products["product_id"][con1 & con2])  #answer


import pandas as pd

def article_views(views: pd.DataFrame) -> pd.DataFrame:


columns = ["article_id","author_id","viewer_id","view_date"]
values = [[1,1,2,2,4,3,3],[3,3,7,7,7,4,4],[5,6,7,6,1,4,4],["2019-08-01","2019-08-02","2019-08-01","2019-08-02","2019-07-22","2019-07-21","2019-07-21"]]
import pandas as pd
df = pd.DataFrame({i:j for i,j in zip(columns,values)})

#set the condition: author id must equal viewer id

con1 = df["author_id"] == df["viewer_id"] #this returns all the rows of the dataframe whereby author_id is the same a viewer

final = df[con1] #this is the new dataframe now

check = final.sort_values(by="viewer_id",ascending=False) #sorted in ascending order

new = check.rename(columns = {"viewer_id" : "id"}) #renamed the viewed column

last = new["id"].unique() #displays only the unique ids

result_df = pd.DataFrame({"id":last}) #create a dataframe with the IDs

result_df

#new[["id"]][0:2] #you can just use slicing like ths

#new[["id"]].sort_values(by="id",ascending=True).unique()








